{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","openSocket","VideoTrack","stream","videoRef","useRef","useEffect","current","srcObject","ref","height","width","controls","autoPlay","App","props","peers","peerConnections","makeOffer","id","pc","getPeerConnection","createOffer","sdp","setLocalDescription","console","log","state","currentId","emit","by","to","type","e","mandatory","OfferToReceiveVideo","OfferToReceiveAudio","RTCPeerConnection","iceServers","url","addStream","onicecandidate","evnt","ice","candidate","onaddstream","onAddStream","currentPearse","push","setState","onDisconnectPeer","filter","p","addHandlers","on","params","data","handleMessage","createAnser","peerConnection","offer","a","setRemoteDescription","RTCSessionDescription","createAnswer","answer","makeAns","error","addIceCandidate","RTCIceCandidate","createRoom","roomid","roomId","connected","joinRoom","room","window","navigator","getUserMedia","video","audio","localVideo","document","getElementById","warn","message","this","style","display","background","onChange","target","value","className","styles","input","onClick","chatRoom","length","map","item","userVideo","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.db4ef035.chunk.js","sourcesContent":["import styles from \"./App.css\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport openSocket from \"socket.io-client\";\n\nconst socket = openSocket(\"http://82b314d6.ngrok.io\");\nconst VideoTrack = ({ stream }) => {\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n\n  return (\n    <div>\n      <video\n        ref={videoRef}\n        height={300}\n        width={300}\n        controls={false}\n        autoPlay\n      />\n    </div>\n  );\n};\n// window.RTCPeerConnection =\n//   window.RTCPeerConnection ||\n//   window.webkitRTCPeerConnection ||\n//   window.mozRTCPeerConnection;\n// window.RTCIceCandidate =\n//   window.RTCIceCandidate ||\n//   window.mozRTCIceCandidate ||\n//   window.webkitRTCIceCandidate;\n// window.RTCSessionDescription =\n//   window.RTCSessionDescription ||\n//   window.mozRTCSessionDescription ||\n//   window.webkitRTCSessionDescription;\n// window.URL = window.URL || window.mozURL || window.webkitURL;\n// window.navigator.getUserMedia =\n//   window.navigator.getUserMedia ||\n//   window.navigator.webkitGetUserMedia ||\n//   window.navigator.mozGetUserMedia;\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roomId: \"\",\n      currentId: \"\",\n      connected: \"\",\n      peers: [],\n    };\n  }\n  peers = [];\n  peerConnections = {};\n  stream = \"\";\n  componentDidMount() {\n    let isAlreadyCalling = false;\n    // let peerConnection = new RTCPeerConnection({\n    //   iceServers: [\n    //     {\n    //       urls: \"stun:stun.l.google.com:19302\"\n    //     }\n    //   ]\n    // });\n\n    window.navigator &&\n      window.navigator.getUserMedia &&\n      window.navigator.getUserMedia(\n        { video: true, audio: false },\n        (stream) => {\n          const localVideo = document.getElementById(\"local-videos\");\n          console.log(\"cames in \");\n          console.log(stream);\n          if (localVideo) {\n            localVideo.srcObject = stream;\n          }\n          this.stream = stream;\n          //   stream\n          //     .getTracks()\n          //     .forEach(track => peerConnection.addTrack(track, stream));\n        },\n        (error) => {\n          console.warn(error.message);\n        }\n      );\n    // peerConnection.ontrack = function({ streams: [stream] }) {\n    //   const remoteVideo = document.getElementById(\"remote-video\");\n    //   console.log(stream);\n    //   if (remoteVideo) {\n    //     const userContainerEl = document.createElement(\"video\");\n    //     userContainerEl.setAttribute(\"autoplay\", true);\n    //     userContainerEl.setAttribute(\"className\", styles.userVideo);\n    //     userContainerEl.srcObject = stream;\n    //     remoteVideo.appendChild(userContainerEl);\n    //   }\n    // };\n    this.addHandlers();\n  }\n\n  makeOffer = (id) => {\n    var pc = this.getPeerConnection(id);\n    pc.createOffer(\n      (sdp) => {\n        pc.setLocalDescription(sdp);\n        console.log(\"Creating an offer for\", id);\n        console.log(this.state.currentId, id);\n        socket.emit(\"msg\", {\n          by: this.state.currentId,\n          to: id,\n          sdp: sdp,\n          type: \"sdp-offer\",\n        });\n      },\n      function (e) {\n        console.log(e);\n      },\n      { mandatory: { OfferToReceiveVideo: true, OfferToReceiveAudio: true } }\n    );\n  };\n\n  getPeerConnection = (id) => {\n    if (this.peerConnections[id]) {\n      return this.peerConnections[id];\n    }\n    var iceConfig = { iceServers: [{ url: \"stun:stun.l.google.com:19302\" }] },\n      currentId,\n      roomId;\n\n    var pc = new RTCPeerConnection(iceConfig);\n    this.peerConnections[id] = pc;\n    pc.addStream(this.stream);\n    pc.onicecandidate = (evnt) => {\n      socket.emit(\"msg\", {\n        by: this.state.currentId,\n        to: id,\n        ice: evnt.candidate,\n        type: \"ice\",\n      });\n    };\n    pc.onaddstream = (evnt) => {\n      console.log(\"Received new stream\");\n      console.log(evnt.stream);\n      this.onAddStream(id, evnt.stream);\n    };\n    return pc;\n  };\n  onAddStream = (id, stream) => {\n    let currentPearse = this.state.peers;\n    currentPearse.push({ id, stream });\n    this.setState({ peers: currentPearse });\n    // const remoteVideo = document.getElementById(\"remote-video\");\n    // console.log(\"adding\");\n    // let element = \"\";\n    // console.log(this.peers);\n    // for (let i = 0; i < this.peers.length; i++) {\n    //   console.log(\"crearting data\");\n    //   console.log(this.peers[i]);\n    //   console.log(this.peers[i].stream);\n    //   const userContainerEl = document.createElement(\"video\");\n\n    //   //   let rm1 = document.getElementById(\"local-videos1\");\n    //   userContainerEl.setAttribute(\"autoplay\", true);\n    //   userContainerEl.srcObject = this.peers[i].stream;\n    //   element += userContainerEl;\n    //   //   remoteVideo.appendChild(userContainerEl);\n    // }\n    // remoteVideo.value = element;\n  };\n  onDisconnectPeer = (id) => {\n    this.peers = this.peers.filter(function (p) {\n      return p.id !== id;\n    });\n  };\n\n  addHandlers = () => {\n    socket.on(\"peer.connected\", (params) => {\n      console.log(\"peeer connect\");\n      console.log(params);\n      this.makeOffer(params.id);\n    });\n    socket.on(\"peer.disconnected\", (data) => {\n      //   api.trigger(\"peer.disconnected\", [data]);\n      this.onDisconnectPeer([data]);\n      //   if (!$rootScope.$$digest) {\n      //     $rootScope.$apply();\n      //   }\n    });\n    socket.on(\"msg\", (data) => {\n      this.handleMessage(data);\n    });\n  };\n\n  createAnser = async (peerConnection, offer) => {\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n    const answer = await peerConnection.createAnswer();\n    await peerConnection.setLocalDescription(new RTCSessionDescription(answer));\n    return answer;\n  };\n  handleMessage = async (data) => {\n    var pc = this.getPeerConnection(data.by);\n    console.log(\"in handleMessage\");\n    console.log(data);\n    switch (data.type) {\n      case \"sdp-offer\":\n        let makeAns = await this.createAnser(pc, data.sdp);\n        console.log(makeAns);\n        socket.emit(\"msg\", {\n          by: this.state.currentId,\n          to: data.by,\n          sdp: makeAns,\n          type: \"sdp-answer\",\n        });\n\n        // console.log(\"in spd offfer\");\n        // pc.setRemoteDescription(new RTCSessionDescription(data.sdp), () => {\n        //   console.log(\"Setting remote description by offer\");\n        //   try {\n        //     pc.createAnswer(sdp => {\n        //       pc.setLocalDescription(sdp);\n        //       console.log(\"sending answer\");\n        //       socket.emit(\"msg\", {\n        //         by: this.state.currentId,\n        //         to: data.by,\n        //         sdp: sdp,\n        //         type: \"sdp-answer\"\n        //       });\n        //     });\n        //   } catch (e) {\n        //     console.log(\"in errro\");\n        //     console.log(e);\n        //   }\n        // });\n        break;\n      case \"sdp-answer\":\n        console.log(\"in spd answer\");\n        pc.setRemoteDescription(\n          new RTCSessionDescription(data.sdp),\n          function () {\n            console.log(\"Setting remote description by answer\");\n          },\n          function (e) {\n            console.error(e);\n          }\n        );\n        break;\n      case \"ice\":\n        if (data.ice) {\n          console.log(\"Adding ice candidates\");\n          pc.addIceCandidate(new RTCIceCandidate(data.ice));\n        }\n        break;\n    }\n  };\n  createRoom = () => {\n    socket.emit(\"init\", null, (roomid, id) => {\n      //   roomId = roomid;\n      //   currentId = id;\n      //   connected = true;\n      this.setState({\n        roomId: roomid,\n        currentId: id,\n        connected: true,\n      });\n    });\n  };\n  joinRoom = () => {\n    socket.emit(\"init\", { room: this.state.roomId }, (roomid, id) => {\n      //   roomId = roomid;\n      //   currentId = id;\n      //   connected = true;\n      this.setState({\n        roomId: roomid,\n        currentId: id,\n        connected: true,\n      });\n    });\n  };\n  render() {\n    console.log(this.state);\n    console.log(this.peers);\n    return (\n      <div>\n        <div\n          style={{ display: \"flex\", background: \"powderblue\", height: \"100px\" }}\n        >\n          <input\n            type=\"text\"\n            onChange={(e) =>\n              this.setState({\n                roomId: e.target.value,\n              })\n            }\n            className={styles.input}\n          />\n          <div className={styles.createRoom} onClick={() => this.joinRoom()}>\n            Join Room\n          </div>\n        </div>\n        <div className={styles.chatRoom}>\n          {this.state.peers.length &&\n            this.state.peers.map((item) => {\n              return <VideoTrack stream={item.stream} />;\n            })}\n        </div>\n        <video id=\"local-videos\" className={styles.userVideo} autoPlay />\n        <div className={styles.createRoom} onClick={() => this.createRoom()}>\n          Create Room\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}